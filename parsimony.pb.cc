// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsimony.proto

#include "parsimony.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Parsimony {
constexpr mut::mut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mut_nuc_()
  , _mut_nuc_cached_byte_size_(0)
  , chromosome_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(0)
  , ref_nuc_(0)
  , par_nuc_(0){}
struct mutDefaultTypeInternal {
  constexpr mutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mutDefaultTypeInternal() {}
  union {
    mut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mutDefaultTypeInternal _mut_default_instance_;
constexpr mutation_list::mutation_list(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mutation_(){}
struct mutation_listDefaultTypeInternal {
  constexpr mutation_listDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mutation_listDefaultTypeInternal() {}
  union {
    mutation_list _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mutation_listDefaultTypeInternal _mutation_list_default_instance_;
constexpr condensed_node::condensed_node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : condensed_leaves_()
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct condensed_nodeDefaultTypeInternal {
  constexpr condensed_nodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~condensed_nodeDefaultTypeInternal() {}
  union {
    condensed_node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT condensed_nodeDefaultTypeInternal _condensed_node_default_instance_;
constexpr node_metadata::node_metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clade_annotations_(){}
struct node_metadataDefaultTypeInternal {
  constexpr node_metadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~node_metadataDefaultTypeInternal() {}
  union {
    node_metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT node_metadataDefaultTypeInternal _node_metadata_default_instance_;
constexpr data::data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_mutations_()
  , condensed_nodes_()
  , metadata_()
  , newick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct dataDefaultTypeInternal {
  constexpr dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~dataDefaultTypeInternal() {}
  union {
    data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT dataDefaultTypeInternal _data_default_instance_;
}  // namespace Parsimony
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parsimony_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_parsimony_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parsimony_2eproto = nullptr;

const uint32_t TableStruct_parsimony_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Parsimony::mut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Parsimony::mut, position_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::mut, ref_nuc_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::mut, par_nuc_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::mut, mut_nuc_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::mut, chromosome_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Parsimony::mutation_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Parsimony::mutation_list, mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Parsimony::condensed_node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Parsimony::condensed_node, node_name_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::condensed_node, condensed_leaves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Parsimony::node_metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Parsimony::node_metadata, clade_annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Parsimony::data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Parsimony::data, newick_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::data, node_mutations_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::data, condensed_nodes_),
  PROTOBUF_FIELD_OFFSET(::Parsimony::data, metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Parsimony::mut)},
  { 11, -1, -1, sizeof(::Parsimony::mutation_list)},
  { 18, -1, -1, sizeof(::Parsimony::condensed_node)},
  { 26, -1, -1, sizeof(::Parsimony::node_metadata)},
  { 33, -1, -1, sizeof(::Parsimony::data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Parsimony::_mut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Parsimony::_mutation_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Parsimony::_condensed_node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Parsimony::_node_metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Parsimony::_data_default_instance_),
};

const char descriptor_table_protodef_parsimony_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017parsimony.proto\022\tParsimony\"^\n\003mut\022\020\n\010p"
  "osition\030\001 \001(\005\022\017\n\007ref_nuc\030\002 \001(\005\022\017\n\007par_nu"
  "c\030\003 \001(\005\022\017\n\007mut_nuc\030\004 \003(\005\022\022\n\nchromosome\030\005"
  " \001(\t\"1\n\rmutation_list\022 \n\010mutation\030\001 \003(\0132"
  "\016.Parsimony.mut\"=\n\016condensed_node\022\021\n\tnod"
  "e_name\030\001 \001(\t\022\030\n\020condensed_leaves\030\002 \003(\t\"*"
  "\n\rnode_metadata\022\031\n\021clade_annotations\030\001 \003"
  "(\t\"\250\001\n\004data\022\016\n\006newick\030\001 \001(\t\0220\n\016node_muta"
  "tions\030\002 \003(\0132\030.Parsimony.mutation_list\0222\n"
  "\017condensed_nodes\030\003 \003(\0132\031.Parsimony.conde"
  "nsed_node\022*\n\010metadata\030\004 \003(\0132\030.Parsimony."
  "node_metadatab\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parsimony_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parsimony_2eproto = {
  false, false, 461, descriptor_table_protodef_parsimony_2eproto, "parsimony.proto", 
  &descriptor_table_parsimony_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_parsimony_2eproto::offsets,
  file_level_metadata_parsimony_2eproto, file_level_enum_descriptors_parsimony_2eproto, file_level_service_descriptors_parsimony_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_parsimony_2eproto_getter() {
  return &descriptor_table_parsimony_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_parsimony_2eproto(&descriptor_table_parsimony_2eproto);
namespace Parsimony {

// ===================================================================

class mut::_Internal {
 public:
};

mut::mut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mut_nuc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Parsimony.mut)
}
mut::mut(const mut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mut_nuc_(from.mut_nuc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chromosome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chromosome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chromosome().empty()) {
    chromosome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chromosome(), 
      GetArenaForAllocation());
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&par_nuc_) -
    reinterpret_cast<char*>(&position_)) + sizeof(par_nuc_));
  // @@protoc_insertion_point(copy_constructor:Parsimony.mut)
}

inline void mut::SharedCtor() {
chromosome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chromosome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&par_nuc_) -
    reinterpret_cast<char*>(&position_)) + sizeof(par_nuc_));
}

mut::~mut() {
  // @@protoc_insertion_point(destructor:Parsimony.mut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chromosome_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mut::ArenaDtor(void* object) {
  mut* _this = reinterpret_cast< mut* >(object);
  (void)_this;
}
void mut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mut::Clear() {
// @@protoc_insertion_point(message_clear_start:Parsimony.mut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mut_nuc_.Clear();
  chromosome_.ClearToEmpty();
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&par_nuc_) -
      reinterpret_cast<char*>(&position_)) + sizeof(par_nuc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ref_nuc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ref_nuc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 par_nuc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          par_nuc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 mut_nuc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mut_nuc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_mut_nuc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chromosome = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_chromosome();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Parsimony.mut.chromosome"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Parsimony.mut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_position(), target);
  }

  // int32 ref_nuc = 2;
  if (this->_internal_ref_nuc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ref_nuc(), target);
  }

  // int32 par_nuc = 3;
  if (this->_internal_par_nuc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_par_nuc(), target);
  }

  // repeated int32 mut_nuc = 4;
  {
    int byte_size = _mut_nuc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_mut_nuc(), byte_size, target);
    }
  }

  // string chromosome = 5;
  if (!this->_internal_chromosome().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chromosome().data(), static_cast<int>(this->_internal_chromosome().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Parsimony.mut.chromosome");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_chromosome(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parsimony.mut)
  return target;
}

size_t mut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parsimony.mut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mut_nuc = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mut_nuc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mut_nuc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string chromosome = 5;
  if (!this->_internal_chromosome().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chromosome());
  }

  // int32 position = 1;
  if (this->_internal_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_position());
  }

  // int32 ref_nuc = 2;
  if (this->_internal_ref_nuc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ref_nuc());
  }

  // int32 par_nuc = 3;
  if (this->_internal_par_nuc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_par_nuc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mut::GetClassData() const { return &_class_data_; }

void mut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mut *>(to)->MergeFrom(
      static_cast<const mut &>(from));
}


void mut::MergeFrom(const mut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parsimony.mut)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mut_nuc_.MergeFrom(from.mut_nuc_);
  if (!from._internal_chromosome().empty()) {
    _internal_set_chromosome(from._internal_chromosome());
  }
  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_ref_nuc() != 0) {
    _internal_set_ref_nuc(from._internal_ref_nuc());
  }
  if (from._internal_par_nuc() != 0) {
    _internal_set_par_nuc(from._internal_par_nuc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mut::CopyFrom(const mut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parsimony.mut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mut::IsInitialized() const {
  return true;
}

void mut::InternalSwap(mut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mut_nuc_.InternalSwap(&other->mut_nuc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chromosome_, lhs_arena,
      &other->chromosome_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mut, par_nuc_)
      + sizeof(mut::par_nuc_)
      - PROTOBUF_FIELD_OFFSET(mut, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parsimony_2eproto_getter, &descriptor_table_parsimony_2eproto_once,
      file_level_metadata_parsimony_2eproto[0]);
}

// ===================================================================

class mutation_list::_Internal {
 public:
};

mutation_list::mutation_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mutation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Parsimony.mutation_list)
}
mutation_list::mutation_list(const mutation_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mutation_(from.mutation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Parsimony.mutation_list)
}

inline void mutation_list::SharedCtor() {
}

mutation_list::~mutation_list() {
  // @@protoc_insertion_point(destructor:Parsimony.mutation_list)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mutation_list::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mutation_list::ArenaDtor(void* object) {
  mutation_list* _this = reinterpret_cast< mutation_list* >(object);
  (void)_this;
}
void mutation_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mutation_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mutation_list::Clear() {
// @@protoc_insertion_point(message_clear_start:Parsimony.mutation_list)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mutation_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Parsimony.mut mutation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mutation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mutation_list::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Parsimony.mutation_list)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Parsimony.mut mutation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mutation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mutation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parsimony.mutation_list)
  return target;
}

size_t mutation_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parsimony.mutation_list)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Parsimony.mut mutation = 1;
  total_size += 1UL * this->_internal_mutation_size();
  for (const auto& msg : this->mutation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mutation_list::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mutation_list::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mutation_list::GetClassData() const { return &_class_data_; }

void mutation_list::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mutation_list *>(to)->MergeFrom(
      static_cast<const mutation_list &>(from));
}


void mutation_list::MergeFrom(const mutation_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parsimony.mutation_list)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mutation_.MergeFrom(from.mutation_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mutation_list::CopyFrom(const mutation_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parsimony.mutation_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mutation_list::IsInitialized() const {
  return true;
}

void mutation_list::InternalSwap(mutation_list* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mutation_.InternalSwap(&other->mutation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mutation_list::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parsimony_2eproto_getter, &descriptor_table_parsimony_2eproto_once,
      file_level_metadata_parsimony_2eproto[1]);
}

// ===================================================================

class condensed_node::_Internal {
 public:
};

condensed_node::condensed_node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  condensed_leaves_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Parsimony.condensed_node)
}
condensed_node::condensed_node(const condensed_node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      condensed_leaves_(from.condensed_leaves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Parsimony.condensed_node)
}

inline void condensed_node::SharedCtor() {
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

condensed_node::~condensed_node() {
  // @@protoc_insertion_point(destructor:Parsimony.condensed_node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void condensed_node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void condensed_node::ArenaDtor(void* object) {
  condensed_node* _this = reinterpret_cast< condensed_node* >(object);
  (void)_this;
}
void condensed_node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void condensed_node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void condensed_node::Clear() {
// @@protoc_insertion_point(message_clear_start:Parsimony.condensed_node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  condensed_leaves_.Clear();
  node_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* condensed_node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Parsimony.condensed_node.node_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string condensed_leaves = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_condensed_leaves();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Parsimony.condensed_node.condensed_leaves"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* condensed_node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Parsimony.condensed_node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Parsimony.condensed_node.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // repeated string condensed_leaves = 2;
  for (int i = 0, n = this->_internal_condensed_leaves_size(); i < n; i++) {
    const auto& s = this->_internal_condensed_leaves(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Parsimony.condensed_node.condensed_leaves");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parsimony.condensed_node)
  return target;
}

size_t condensed_node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parsimony.condensed_node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string condensed_leaves = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(condensed_leaves_.size());
  for (int i = 0, n = condensed_leaves_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      condensed_leaves_.Get(i));
  }

  // string node_name = 1;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData condensed_node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    condensed_node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*condensed_node::GetClassData() const { return &_class_data_; }

void condensed_node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<condensed_node *>(to)->MergeFrom(
      static_cast<const condensed_node &>(from));
}


void condensed_node::MergeFrom(const condensed_node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parsimony.condensed_node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  condensed_leaves_.MergeFrom(from.condensed_leaves_);
  if (!from._internal_node_name().empty()) {
    _internal_set_node_name(from._internal_node_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void condensed_node::CopyFrom(const condensed_node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parsimony.condensed_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool condensed_node::IsInitialized() const {
  return true;
}

void condensed_node::InternalSwap(condensed_node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  condensed_leaves_.InternalSwap(&other->condensed_leaves_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_name_, lhs_arena,
      &other->node_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata condensed_node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parsimony_2eproto_getter, &descriptor_table_parsimony_2eproto_once,
      file_level_metadata_parsimony_2eproto[2]);
}

// ===================================================================

class node_metadata::_Internal {
 public:
};

node_metadata::node_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  clade_annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Parsimony.node_metadata)
}
node_metadata::node_metadata(const node_metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clade_annotations_(from.clade_annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Parsimony.node_metadata)
}

inline void node_metadata::SharedCtor() {
}

node_metadata::~node_metadata() {
  // @@protoc_insertion_point(destructor:Parsimony.node_metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void node_metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void node_metadata::ArenaDtor(void* object) {
  node_metadata* _this = reinterpret_cast< node_metadata* >(object);
  (void)_this;
}
void node_metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void node_metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void node_metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Parsimony.node_metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clade_annotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* node_metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string clade_annotations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clade_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Parsimony.node_metadata.clade_annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* node_metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Parsimony.node_metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string clade_annotations = 1;
  for (int i = 0, n = this->_internal_clade_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_clade_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Parsimony.node_metadata.clade_annotations");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parsimony.node_metadata)
  return target;
}

size_t node_metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parsimony.node_metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string clade_annotations = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clade_annotations_.size());
  for (int i = 0, n = clade_annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clade_annotations_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData node_metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    node_metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*node_metadata::GetClassData() const { return &_class_data_; }

void node_metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<node_metadata *>(to)->MergeFrom(
      static_cast<const node_metadata &>(from));
}


void node_metadata::MergeFrom(const node_metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parsimony.node_metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  clade_annotations_.MergeFrom(from.clade_annotations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void node_metadata::CopyFrom(const node_metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parsimony.node_metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_metadata::IsInitialized() const {
  return true;
}

void node_metadata::InternalSwap(node_metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  clade_annotations_.InternalSwap(&other->clade_annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata node_metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parsimony_2eproto_getter, &descriptor_table_parsimony_2eproto_once,
      file_level_metadata_parsimony_2eproto[3]);
}

// ===================================================================

class data::_Internal {
 public:
};

data::data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  node_mutations_(arena),
  condensed_nodes_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Parsimony.data)
}
data::data(const data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_mutations_(from.node_mutations_),
      condensed_nodes_(from.condensed_nodes_),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    newick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newick().empty()) {
    newick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newick(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Parsimony.data)
}

inline void data::SharedCtor() {
newick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  newick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

data::~data() {
  // @@protoc_insertion_point(destructor:Parsimony.data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  newick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void data::ArenaDtor(void* object) {
  data* _this = reinterpret_cast< data* >(object);
  (void)_this;
}
void data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void data::Clear() {
// @@protoc_insertion_point(message_clear_start:Parsimony.data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_mutations_.Clear();
  condensed_nodes_.Clear();
  metadata_.Clear();
  newick_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string newick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Parsimony.data.newick"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Parsimony.mutation_list node_mutations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Parsimony.condensed_node condensed_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condensed_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Parsimony.node_metadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Parsimony.data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string newick = 1;
  if (!this->_internal_newick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newick().data(), static_cast<int>(this->_internal_newick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Parsimony.data.newick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newick(), target);
  }

  // repeated .Parsimony.mutation_list node_mutations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_mutations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_node_mutations(i), target, stream);
  }

  // repeated .Parsimony.condensed_node condensed_nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condensed_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_condensed_nodes(i), target, stream);
  }

  // repeated .Parsimony.node_metadata metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parsimony.data)
  return target;
}

size_t data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parsimony.data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Parsimony.mutation_list node_mutations = 2;
  total_size += 1UL * this->_internal_node_mutations_size();
  for (const auto& msg : this->node_mutations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Parsimony.condensed_node condensed_nodes = 3;
  total_size += 1UL * this->_internal_condensed_nodes_size();
  for (const auto& msg : this->condensed_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Parsimony.node_metadata metadata = 4;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string newick = 1;
  if (!this->_internal_newick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newick());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*data::GetClassData() const { return &_class_data_; }

void data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<data *>(to)->MergeFrom(
      static_cast<const data &>(from));
}


void data::MergeFrom(const data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parsimony.data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  node_mutations_.MergeFrom(from.node_mutations_);
  condensed_nodes_.MergeFrom(from.condensed_nodes_);
  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_newick().empty()) {
    _internal_set_newick(from._internal_newick());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void data::CopyFrom(const data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parsimony.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data::IsInitialized() const {
  return true;
}

void data::InternalSwap(data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  node_mutations_.InternalSwap(&other->node_mutations_);
  condensed_nodes_.InternalSwap(&other->condensed_nodes_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &newick_, lhs_arena,
      &other->newick_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_parsimony_2eproto_getter, &descriptor_table_parsimony_2eproto_once,
      file_level_metadata_parsimony_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Parsimony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Parsimony::mut* Arena::CreateMaybeMessage< ::Parsimony::mut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Parsimony::mut >(arena);
}
template<> PROTOBUF_NOINLINE ::Parsimony::mutation_list* Arena::CreateMaybeMessage< ::Parsimony::mutation_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Parsimony::mutation_list >(arena);
}
template<> PROTOBUF_NOINLINE ::Parsimony::condensed_node* Arena::CreateMaybeMessage< ::Parsimony::condensed_node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Parsimony::condensed_node >(arena);
}
template<> PROTOBUF_NOINLINE ::Parsimony::node_metadata* Arena::CreateMaybeMessage< ::Parsimony::node_metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Parsimony::node_metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Parsimony::data* Arena::CreateMaybeMessage< ::Parsimony::data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Parsimony::data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
