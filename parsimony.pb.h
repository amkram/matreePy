// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsimony.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parsimony_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parsimony_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parsimony_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parsimony_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parsimony_2eproto;
namespace Parsimony {
class condensed_node;
struct condensed_nodeDefaultTypeInternal;
extern condensed_nodeDefaultTypeInternal _condensed_node_default_instance_;
class data;
struct dataDefaultTypeInternal;
extern dataDefaultTypeInternal _data_default_instance_;
class mut;
struct mutDefaultTypeInternal;
extern mutDefaultTypeInternal _mut_default_instance_;
class mutation_list;
struct mutation_listDefaultTypeInternal;
extern mutation_listDefaultTypeInternal _mutation_list_default_instance_;
class node_metadata;
struct node_metadataDefaultTypeInternal;
extern node_metadataDefaultTypeInternal _node_metadata_default_instance_;
}  // namespace Parsimony
PROTOBUF_NAMESPACE_OPEN
template<> ::Parsimony::condensed_node* Arena::CreateMaybeMessage<::Parsimony::condensed_node>(Arena*);
template<> ::Parsimony::data* Arena::CreateMaybeMessage<::Parsimony::data>(Arena*);
template<> ::Parsimony::mut* Arena::CreateMaybeMessage<::Parsimony::mut>(Arena*);
template<> ::Parsimony::mutation_list* Arena::CreateMaybeMessage<::Parsimony::mutation_list>(Arena*);
template<> ::Parsimony::node_metadata* Arena::CreateMaybeMessage<::Parsimony::node_metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Parsimony {

// ===================================================================

class mut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Parsimony.mut) */ {
 public:
  inline mut() : mut(nullptr) {}
  ~mut() override;
  explicit constexpr mut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mut(const mut& from);
  mut(mut&& from) noexcept
    : mut() {
    *this = ::std::move(from);
  }

  inline mut& operator=(const mut& from) {
    CopyFrom(from);
    return *this;
  }
  inline mut& operator=(mut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mut& default_instance() {
    return *internal_default_instance();
  }
  static inline const mut* internal_default_instance() {
    return reinterpret_cast<const mut*>(
               &_mut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(mut& a, mut& b) {
    a.Swap(&b);
  }
  inline void Swap(mut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Parsimony.mut";
  }
  protected:
  explicit mut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutNucFieldNumber = 4,
    kChromosomeFieldNumber = 5,
    kPositionFieldNumber = 1,
    kRefNucFieldNumber = 2,
    kParNucFieldNumber = 3,
  };
  // repeated int32 mut_nuc = 4;
  int mut_nuc_size() const;
  private:
  int _internal_mut_nuc_size() const;
  public:
  void clear_mut_nuc();
  private:
  int32_t _internal_mut_nuc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_mut_nuc() const;
  void _internal_add_mut_nuc(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_mut_nuc();
  public:
  int32_t mut_nuc(int index) const;
  void set_mut_nuc(int index, int32_t value);
  void add_mut_nuc(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      mut_nuc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_mut_nuc();

  // string chromosome = 5;
  void clear_chromosome();
  const std::string& chromosome() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chromosome(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chromosome();
  PROTOBUF_NODISCARD std::string* release_chromosome();
  void set_allocated_chromosome(std::string* chromosome);
  private:
  const std::string& _internal_chromosome() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chromosome(const std::string& value);
  std::string* _internal_mutable_chromosome();
  public:

  // int32 position = 1;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // int32 ref_nuc = 2;
  void clear_ref_nuc();
  int32_t ref_nuc() const;
  void set_ref_nuc(int32_t value);
  private:
  int32_t _internal_ref_nuc() const;
  void _internal_set_ref_nuc(int32_t value);
  public:

  // int32 par_nuc = 3;
  void clear_par_nuc();
  int32_t par_nuc() const;
  void set_par_nuc(int32_t value);
  private:
  int32_t _internal_par_nuc() const;
  void _internal_set_par_nuc(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Parsimony.mut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > mut_nuc_;
  mutable std::atomic<int> _mut_nuc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chromosome_;
  int32_t position_;
  int32_t ref_nuc_;
  int32_t par_nuc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class mutation_list final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Parsimony.mutation_list) */ {
 public:
  inline mutation_list() : mutation_list(nullptr) {}
  ~mutation_list() override;
  explicit constexpr mutation_list(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mutation_list(const mutation_list& from);
  mutation_list(mutation_list&& from) noexcept
    : mutation_list() {
    *this = ::std::move(from);
  }

  inline mutation_list& operator=(const mutation_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline mutation_list& operator=(mutation_list&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mutation_list& default_instance() {
    return *internal_default_instance();
  }
  static inline const mutation_list* internal_default_instance() {
    return reinterpret_cast<const mutation_list*>(
               &_mutation_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mutation_list& a, mutation_list& b) {
    a.Swap(&b);
  }
  inline void Swap(mutation_list* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mutation_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mutation_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mutation_list>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mutation_list& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mutation_list& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mutation_list* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Parsimony.mutation_list";
  }
  protected:
  explicit mutation_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationFieldNumber = 1,
  };
  // repeated .Parsimony.mut mutation = 1;
  int mutation_size() const;
  private:
  int _internal_mutation_size() const;
  public:
  void clear_mutation();
  ::Parsimony::mut* mutable_mutation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mut >*
      mutable_mutation();
  private:
  const ::Parsimony::mut& _internal_mutation(int index) const;
  ::Parsimony::mut* _internal_add_mutation();
  public:
  const ::Parsimony::mut& mutation(int index) const;
  ::Parsimony::mut* add_mutation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mut >&
      mutation() const;

  // @@protoc_insertion_point(class_scope:Parsimony.mutation_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mut > mutation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class condensed_node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Parsimony.condensed_node) */ {
 public:
  inline condensed_node() : condensed_node(nullptr) {}
  ~condensed_node() override;
  explicit constexpr condensed_node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  condensed_node(const condensed_node& from);
  condensed_node(condensed_node&& from) noexcept
    : condensed_node() {
    *this = ::std::move(from);
  }

  inline condensed_node& operator=(const condensed_node& from) {
    CopyFrom(from);
    return *this;
  }
  inline condensed_node& operator=(condensed_node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const condensed_node& default_instance() {
    return *internal_default_instance();
  }
  static inline const condensed_node* internal_default_instance() {
    return reinterpret_cast<const condensed_node*>(
               &_condensed_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(condensed_node& a, condensed_node& b) {
    a.Swap(&b);
  }
  inline void Swap(condensed_node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(condensed_node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  condensed_node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<condensed_node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const condensed_node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const condensed_node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(condensed_node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Parsimony.condensed_node";
  }
  protected:
  explicit condensed_node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCondensedLeavesFieldNumber = 2,
    kNodeNameFieldNumber = 1,
  };
  // repeated string condensed_leaves = 2;
  int condensed_leaves_size() const;
  private:
  int _internal_condensed_leaves_size() const;
  public:
  void clear_condensed_leaves();
  const std::string& condensed_leaves(int index) const;
  std::string* mutable_condensed_leaves(int index);
  void set_condensed_leaves(int index, const std::string& value);
  void set_condensed_leaves(int index, std::string&& value);
  void set_condensed_leaves(int index, const char* value);
  void set_condensed_leaves(int index, const char* value, size_t size);
  std::string* add_condensed_leaves();
  void add_condensed_leaves(const std::string& value);
  void add_condensed_leaves(std::string&& value);
  void add_condensed_leaves(const char* value);
  void add_condensed_leaves(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& condensed_leaves() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_condensed_leaves();
  private:
  const std::string& _internal_condensed_leaves(int index) const;
  std::string* _internal_add_condensed_leaves();
  public:

  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // @@protoc_insertion_point(class_scope:Parsimony.condensed_node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> condensed_leaves_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class node_metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Parsimony.node_metadata) */ {
 public:
  inline node_metadata() : node_metadata(nullptr) {}
  ~node_metadata() override;
  explicit constexpr node_metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  node_metadata(const node_metadata& from);
  node_metadata(node_metadata&& from) noexcept
    : node_metadata() {
    *this = ::std::move(from);
  }

  inline node_metadata& operator=(const node_metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_metadata& operator=(node_metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_metadata* internal_default_instance() {
    return reinterpret_cast<const node_metadata*>(
               &_node_metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(node_metadata& a, node_metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(node_metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<node_metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const node_metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const node_metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(node_metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Parsimony.node_metadata";
  }
  protected:
  explicit node_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCladeAnnotationsFieldNumber = 1,
  };
  // repeated string clade_annotations = 1;
  int clade_annotations_size() const;
  private:
  int _internal_clade_annotations_size() const;
  public:
  void clear_clade_annotations();
  const std::string& clade_annotations(int index) const;
  std::string* mutable_clade_annotations(int index);
  void set_clade_annotations(int index, const std::string& value);
  void set_clade_annotations(int index, std::string&& value);
  void set_clade_annotations(int index, const char* value);
  void set_clade_annotations(int index, const char* value, size_t size);
  std::string* add_clade_annotations();
  void add_clade_annotations(const std::string& value);
  void add_clade_annotations(std::string&& value);
  void add_clade_annotations(const char* value);
  void add_clade_annotations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clade_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clade_annotations();
  private:
  const std::string& _internal_clade_annotations(int index) const;
  std::string* _internal_add_clade_annotations();
  public:

  // @@protoc_insertion_point(class_scope:Parsimony.node_metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clade_annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Parsimony.data) */ {
 public:
  inline data() : data(nullptr) {}
  ~data() override;
  explicit constexpr data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  data(const data& from);
  data(data&& from) noexcept
    : data() {
    *this = ::std::move(from);
  }

  inline data& operator=(const data& from) {
    CopyFrom(from);
    return *this;
  }
  inline data& operator=(data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const data& default_instance() {
    return *internal_default_instance();
  }
  static inline const data* internal_default_instance() {
    return reinterpret_cast<const data*>(
               &_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(data& a, data& b) {
    a.Swap(&b);
  }
  inline void Swap(data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Parsimony.data";
  }
  protected:
  explicit data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeMutationsFieldNumber = 2,
    kCondensedNodesFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kNewickFieldNumber = 1,
  };
  // repeated .Parsimony.mutation_list node_mutations = 2;
  int node_mutations_size() const;
  private:
  int _internal_node_mutations_size() const;
  public:
  void clear_node_mutations();
  ::Parsimony::mutation_list* mutable_node_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mutation_list >*
      mutable_node_mutations();
  private:
  const ::Parsimony::mutation_list& _internal_node_mutations(int index) const;
  ::Parsimony::mutation_list* _internal_add_node_mutations();
  public:
  const ::Parsimony::mutation_list& node_mutations(int index) const;
  ::Parsimony::mutation_list* add_node_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mutation_list >&
      node_mutations() const;

  // repeated .Parsimony.condensed_node condensed_nodes = 3;
  int condensed_nodes_size() const;
  private:
  int _internal_condensed_nodes_size() const;
  public:
  void clear_condensed_nodes();
  ::Parsimony::condensed_node* mutable_condensed_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::condensed_node >*
      mutable_condensed_nodes();
  private:
  const ::Parsimony::condensed_node& _internal_condensed_nodes(int index) const;
  ::Parsimony::condensed_node* _internal_add_condensed_nodes();
  public:
  const ::Parsimony::condensed_node& condensed_nodes(int index) const;
  ::Parsimony::condensed_node* add_condensed_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::condensed_node >&
      condensed_nodes() const;

  // repeated .Parsimony.node_metadata metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::Parsimony::node_metadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::node_metadata >*
      mutable_metadata();
  private:
  const ::Parsimony::node_metadata& _internal_metadata(int index) const;
  ::Parsimony::node_metadata* _internal_add_metadata();
  public:
  const ::Parsimony::node_metadata& metadata(int index) const;
  ::Parsimony::node_metadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::node_metadata >&
      metadata() const;

  // string newick = 1;
  void clear_newick();
  const std::string& newick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newick();
  PROTOBUF_NODISCARD std::string* release_newick();
  void set_allocated_newick(std::string* newick);
  private:
  const std::string& _internal_newick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newick(const std::string& value);
  std::string* _internal_mutable_newick();
  public:

  // @@protoc_insertion_point(class_scope:Parsimony.data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mutation_list > node_mutations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::condensed_node > condensed_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::node_metadata > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsimony_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mut

// int32 position = 1;
inline void mut::clear_position() {
  position_ = 0;
}
inline int32_t mut::_internal_position() const {
  return position_;
}
inline int32_t mut::position() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.position)
  return _internal_position();
}
inline void mut::_internal_set_position(int32_t value) {
  
  position_ = value;
}
inline void mut::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.position)
}

// int32 ref_nuc = 2;
inline void mut::clear_ref_nuc() {
  ref_nuc_ = 0;
}
inline int32_t mut::_internal_ref_nuc() const {
  return ref_nuc_;
}
inline int32_t mut::ref_nuc() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.ref_nuc)
  return _internal_ref_nuc();
}
inline void mut::_internal_set_ref_nuc(int32_t value) {
  
  ref_nuc_ = value;
}
inline void mut::set_ref_nuc(int32_t value) {
  _internal_set_ref_nuc(value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.ref_nuc)
}

// int32 par_nuc = 3;
inline void mut::clear_par_nuc() {
  par_nuc_ = 0;
}
inline int32_t mut::_internal_par_nuc() const {
  return par_nuc_;
}
inline int32_t mut::par_nuc() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.par_nuc)
  return _internal_par_nuc();
}
inline void mut::_internal_set_par_nuc(int32_t value) {
  
  par_nuc_ = value;
}
inline void mut::set_par_nuc(int32_t value) {
  _internal_set_par_nuc(value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.par_nuc)
}

// repeated int32 mut_nuc = 4;
inline int mut::_internal_mut_nuc_size() const {
  return mut_nuc_.size();
}
inline int mut::mut_nuc_size() const {
  return _internal_mut_nuc_size();
}
inline void mut::clear_mut_nuc() {
  mut_nuc_.Clear();
}
inline int32_t mut::_internal_mut_nuc(int index) const {
  return mut_nuc_.Get(index);
}
inline int32_t mut::mut_nuc(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.mut_nuc)
  return _internal_mut_nuc(index);
}
inline void mut::set_mut_nuc(int index, int32_t value) {
  mut_nuc_.Set(index, value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.mut_nuc)
}
inline void mut::_internal_add_mut_nuc(int32_t value) {
  mut_nuc_.Add(value);
}
inline void mut::add_mut_nuc(int32_t value) {
  _internal_add_mut_nuc(value);
  // @@protoc_insertion_point(field_add:Parsimony.mut.mut_nuc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
mut::_internal_mut_nuc() const {
  return mut_nuc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
mut::mut_nuc() const {
  // @@protoc_insertion_point(field_list:Parsimony.mut.mut_nuc)
  return _internal_mut_nuc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
mut::_internal_mutable_mut_nuc() {
  return &mut_nuc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
mut::mutable_mut_nuc() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.mut.mut_nuc)
  return _internal_mutable_mut_nuc();
}

// string chromosome = 5;
inline void mut::clear_chromosome() {
  chromosome_.ClearToEmpty();
}
inline const std::string& mut::chromosome() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.chromosome)
  return _internal_chromosome();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mut::set_chromosome(ArgT0&& arg0, ArgT... args) {
 
 chromosome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Parsimony.mut.chromosome)
}
inline std::string* mut::mutable_chromosome() {
  std::string* _s = _internal_mutable_chromosome();
  // @@protoc_insertion_point(field_mutable:Parsimony.mut.chromosome)
  return _s;
}
inline const std::string& mut::_internal_chromosome() const {
  return chromosome_.Get();
}
inline void mut::_internal_set_chromosome(const std::string& value) {
  
  chromosome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mut::_internal_mutable_chromosome() {
  
  return chromosome_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mut::release_chromosome() {
  // @@protoc_insertion_point(field_release:Parsimony.mut.chromosome)
  return chromosome_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mut::set_allocated_chromosome(std::string* chromosome) {
  if (chromosome != nullptr) {
    
  } else {
    
  }
  chromosome_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chromosome,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chromosome_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chromosome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Parsimony.mut.chromosome)
}

// -------------------------------------------------------------------

// mutation_list

// repeated .Parsimony.mut mutation = 1;
inline int mutation_list::_internal_mutation_size() const {
  return mutation_.size();
}
inline int mutation_list::mutation_size() const {
  return _internal_mutation_size();
}
inline void mutation_list::clear_mutation() {
  mutation_.Clear();
}
inline ::Parsimony::mut* mutation_list::mutable_mutation(int index) {
  // @@protoc_insertion_point(field_mutable:Parsimony.mutation_list.mutation)
  return mutation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mut >*
mutation_list::mutable_mutation() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.mutation_list.mutation)
  return &mutation_;
}
inline const ::Parsimony::mut& mutation_list::_internal_mutation(int index) const {
  return mutation_.Get(index);
}
inline const ::Parsimony::mut& mutation_list::mutation(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.mutation_list.mutation)
  return _internal_mutation(index);
}
inline ::Parsimony::mut* mutation_list::_internal_add_mutation() {
  return mutation_.Add();
}
inline ::Parsimony::mut* mutation_list::add_mutation() {
  ::Parsimony::mut* _add = _internal_add_mutation();
  // @@protoc_insertion_point(field_add:Parsimony.mutation_list.mutation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mut >&
mutation_list::mutation() const {
  // @@protoc_insertion_point(field_list:Parsimony.mutation_list.mutation)
  return mutation_;
}

// -------------------------------------------------------------------

// condensed_node

// string node_name = 1;
inline void condensed_node::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& condensed_node::node_name() const {
  // @@protoc_insertion_point(field_get:Parsimony.condensed_node.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void condensed_node::set_node_name(ArgT0&& arg0, ArgT... args) {
 
 node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Parsimony.condensed_node.node_name)
}
inline std::string* condensed_node::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:Parsimony.condensed_node.node_name)
  return _s;
}
inline const std::string& condensed_node::_internal_node_name() const {
  return node_name_.Get();
}
inline void condensed_node::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* condensed_node::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* condensed_node::release_node_name() {
  // @@protoc_insertion_point(field_release:Parsimony.condensed_node.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void condensed_node::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Parsimony.condensed_node.node_name)
}

// repeated string condensed_leaves = 2;
inline int condensed_node::_internal_condensed_leaves_size() const {
  return condensed_leaves_.size();
}
inline int condensed_node::condensed_leaves_size() const {
  return _internal_condensed_leaves_size();
}
inline void condensed_node::clear_condensed_leaves() {
  condensed_leaves_.Clear();
}
inline std::string* condensed_node::add_condensed_leaves() {
  std::string* _s = _internal_add_condensed_leaves();
  // @@protoc_insertion_point(field_add_mutable:Parsimony.condensed_node.condensed_leaves)
  return _s;
}
inline const std::string& condensed_node::_internal_condensed_leaves(int index) const {
  return condensed_leaves_.Get(index);
}
inline const std::string& condensed_node::condensed_leaves(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.condensed_node.condensed_leaves)
  return _internal_condensed_leaves(index);
}
inline std::string* condensed_node::mutable_condensed_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:Parsimony.condensed_node.condensed_leaves)
  return condensed_leaves_.Mutable(index);
}
inline void condensed_node::set_condensed_leaves(int index, const std::string& value) {
  condensed_leaves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Parsimony.condensed_node.condensed_leaves)
}
inline void condensed_node::set_condensed_leaves(int index, std::string&& value) {
  condensed_leaves_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Parsimony.condensed_node.condensed_leaves)
}
inline void condensed_node::set_condensed_leaves(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  condensed_leaves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Parsimony.condensed_node.condensed_leaves)
}
inline void condensed_node::set_condensed_leaves(int index, const char* value, size_t size) {
  condensed_leaves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Parsimony.condensed_node.condensed_leaves)
}
inline std::string* condensed_node::_internal_add_condensed_leaves() {
  return condensed_leaves_.Add();
}
inline void condensed_node::add_condensed_leaves(const std::string& value) {
  condensed_leaves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Parsimony.condensed_node.condensed_leaves)
}
inline void condensed_node::add_condensed_leaves(std::string&& value) {
  condensed_leaves_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Parsimony.condensed_node.condensed_leaves)
}
inline void condensed_node::add_condensed_leaves(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  condensed_leaves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Parsimony.condensed_node.condensed_leaves)
}
inline void condensed_node::add_condensed_leaves(const char* value, size_t size) {
  condensed_leaves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Parsimony.condensed_node.condensed_leaves)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
condensed_node::condensed_leaves() const {
  // @@protoc_insertion_point(field_list:Parsimony.condensed_node.condensed_leaves)
  return condensed_leaves_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
condensed_node::mutable_condensed_leaves() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.condensed_node.condensed_leaves)
  return &condensed_leaves_;
}

// -------------------------------------------------------------------

// node_metadata

// repeated string clade_annotations = 1;
inline int node_metadata::_internal_clade_annotations_size() const {
  return clade_annotations_.size();
}
inline int node_metadata::clade_annotations_size() const {
  return _internal_clade_annotations_size();
}
inline void node_metadata::clear_clade_annotations() {
  clade_annotations_.Clear();
}
inline std::string* node_metadata::add_clade_annotations() {
  std::string* _s = _internal_add_clade_annotations();
  // @@protoc_insertion_point(field_add_mutable:Parsimony.node_metadata.clade_annotations)
  return _s;
}
inline const std::string& node_metadata::_internal_clade_annotations(int index) const {
  return clade_annotations_.Get(index);
}
inline const std::string& node_metadata::clade_annotations(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.node_metadata.clade_annotations)
  return _internal_clade_annotations(index);
}
inline std::string* node_metadata::mutable_clade_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:Parsimony.node_metadata.clade_annotations)
  return clade_annotations_.Mutable(index);
}
inline void node_metadata::set_clade_annotations(int index, const std::string& value) {
  clade_annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Parsimony.node_metadata.clade_annotations)
}
inline void node_metadata::set_clade_annotations(int index, std::string&& value) {
  clade_annotations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Parsimony.node_metadata.clade_annotations)
}
inline void node_metadata::set_clade_annotations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clade_annotations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Parsimony.node_metadata.clade_annotations)
}
inline void node_metadata::set_clade_annotations(int index, const char* value, size_t size) {
  clade_annotations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Parsimony.node_metadata.clade_annotations)
}
inline std::string* node_metadata::_internal_add_clade_annotations() {
  return clade_annotations_.Add();
}
inline void node_metadata::add_clade_annotations(const std::string& value) {
  clade_annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Parsimony.node_metadata.clade_annotations)
}
inline void node_metadata::add_clade_annotations(std::string&& value) {
  clade_annotations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Parsimony.node_metadata.clade_annotations)
}
inline void node_metadata::add_clade_annotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clade_annotations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Parsimony.node_metadata.clade_annotations)
}
inline void node_metadata::add_clade_annotations(const char* value, size_t size) {
  clade_annotations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Parsimony.node_metadata.clade_annotations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
node_metadata::clade_annotations() const {
  // @@protoc_insertion_point(field_list:Parsimony.node_metadata.clade_annotations)
  return clade_annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
node_metadata::mutable_clade_annotations() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.node_metadata.clade_annotations)
  return &clade_annotations_;
}

// -------------------------------------------------------------------

// data

// string newick = 1;
inline void data::clear_newick() {
  newick_.ClearToEmpty();
}
inline const std::string& data::newick() const {
  // @@protoc_insertion_point(field_get:Parsimony.data.newick)
  return _internal_newick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void data::set_newick(ArgT0&& arg0, ArgT... args) {
 
 newick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Parsimony.data.newick)
}
inline std::string* data::mutable_newick() {
  std::string* _s = _internal_mutable_newick();
  // @@protoc_insertion_point(field_mutable:Parsimony.data.newick)
  return _s;
}
inline const std::string& data::_internal_newick() const {
  return newick_.Get();
}
inline void data::_internal_set_newick(const std::string& value) {
  
  newick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* data::_internal_mutable_newick() {
  
  return newick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* data::release_newick() {
  // @@protoc_insertion_point(field_release:Parsimony.data.newick)
  return newick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void data::set_allocated_newick(std::string* newick) {
  if (newick != nullptr) {
    
  } else {
    
  }
  newick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newick,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (newick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    newick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Parsimony.data.newick)
}

// repeated .Parsimony.mutation_list node_mutations = 2;
inline int data::_internal_node_mutations_size() const {
  return node_mutations_.size();
}
inline int data::node_mutations_size() const {
  return _internal_node_mutations_size();
}
inline void data::clear_node_mutations() {
  node_mutations_.Clear();
}
inline ::Parsimony::mutation_list* data::mutable_node_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:Parsimony.data.node_mutations)
  return node_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mutation_list >*
data::mutable_node_mutations() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.data.node_mutations)
  return &node_mutations_;
}
inline const ::Parsimony::mutation_list& data::_internal_node_mutations(int index) const {
  return node_mutations_.Get(index);
}
inline const ::Parsimony::mutation_list& data::node_mutations(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.data.node_mutations)
  return _internal_node_mutations(index);
}
inline ::Parsimony::mutation_list* data::_internal_add_node_mutations() {
  return node_mutations_.Add();
}
inline ::Parsimony::mutation_list* data::add_node_mutations() {
  ::Parsimony::mutation_list* _add = _internal_add_node_mutations();
  // @@protoc_insertion_point(field_add:Parsimony.data.node_mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::mutation_list >&
data::node_mutations() const {
  // @@protoc_insertion_point(field_list:Parsimony.data.node_mutations)
  return node_mutations_;
}

// repeated .Parsimony.condensed_node condensed_nodes = 3;
inline int data::_internal_condensed_nodes_size() const {
  return condensed_nodes_.size();
}
inline int data::condensed_nodes_size() const {
  return _internal_condensed_nodes_size();
}
inline void data::clear_condensed_nodes() {
  condensed_nodes_.Clear();
}
inline ::Parsimony::condensed_node* data::mutable_condensed_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:Parsimony.data.condensed_nodes)
  return condensed_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::condensed_node >*
data::mutable_condensed_nodes() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.data.condensed_nodes)
  return &condensed_nodes_;
}
inline const ::Parsimony::condensed_node& data::_internal_condensed_nodes(int index) const {
  return condensed_nodes_.Get(index);
}
inline const ::Parsimony::condensed_node& data::condensed_nodes(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.data.condensed_nodes)
  return _internal_condensed_nodes(index);
}
inline ::Parsimony::condensed_node* data::_internal_add_condensed_nodes() {
  return condensed_nodes_.Add();
}
inline ::Parsimony::condensed_node* data::add_condensed_nodes() {
  ::Parsimony::condensed_node* _add = _internal_add_condensed_nodes();
  // @@protoc_insertion_point(field_add:Parsimony.data.condensed_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::condensed_node >&
data::condensed_nodes() const {
  // @@protoc_insertion_point(field_list:Parsimony.data.condensed_nodes)
  return condensed_nodes_;
}

// repeated .Parsimony.node_metadata metadata = 4;
inline int data::_internal_metadata_size() const {
  return metadata_.size();
}
inline int data::metadata_size() const {
  return _internal_metadata_size();
}
inline void data::clear_metadata() {
  metadata_.Clear();
}
inline ::Parsimony::node_metadata* data::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Parsimony.data.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::node_metadata >*
data::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.data.metadata)
  return &metadata_;
}
inline const ::Parsimony::node_metadata& data::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::Parsimony::node_metadata& data::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.data.metadata)
  return _internal_metadata(index);
}
inline ::Parsimony::node_metadata* data::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::Parsimony::node_metadata* data::add_metadata() {
  ::Parsimony::node_metadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:Parsimony.data.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Parsimony::node_metadata >&
data::metadata() const {
  // @@protoc_insertion_point(field_list:Parsimony.data.metadata)
  return metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Parsimony

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parsimony_2eproto
